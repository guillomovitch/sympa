#! --PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4

# This file is part of Sympa, see top-level README.md file for details

use lib split(/:/, $ENV{SYMPALIB} || ''), '--modulesdir--';
use strict;
use warnings;

use Conf;
use Sympa::Constants;
use Sympa::DatabaseManager;

## Load sympa config
Conf::load(Sympa::Constants::CONFIG) or die 'config_error';

chdir $Conf::Conf{'home'};

my $sdm = Sympa::DatabaseManager->instance
    or die 'Can\'t connect to database';

my $sth = $sdm->do_query(
    q{SELECT user_subscriber, comment_subscriber
      FROM subscriber_table}
) or die 'Unable to execute SQL statement';

my $user;

while ($user = $sth->fetchrow_hashref('NAME_lc')) {
    printf "\nUser: %s", $user->{'user_subscriber'};

    unless ($user->{'comment_subscriber'}) {
        my $sth2 = $sdm->do_prepared_query(
            q{SELECT gecos_user
              FROM user_table
              WHERE email_user = ?},
            $user->{'user_subscriber'}
        ) or die "Unable to execute SQL statement";

        my $gecos = $sth2->fetchrow;
        $sth2->finish();

        if ($gecos) {
            printf " =>%s", $gecos;
            my $sth2 = $sdm->do_prepared_query(
                q{UPDATE subscriber_table
                  SET comment_subscriber = ?
                  WHERE user_subscriber = ?},
                $gecos, $user->{'user_subscriber'}
            ) or die "Unable to execute SQL statement";
            $sth2->finish();
        }

    }
}

$sth->finish();

## Disconnect from Database
Sympa::DatabaseManager->disconnect();
